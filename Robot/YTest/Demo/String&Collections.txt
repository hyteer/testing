*** Settings ***
Library           String
Library           Collections

*** Test Cases ***
decode
    ${bytes}    Convert To Bytes    \xe5\x95\x86\xe5\x9f\x8e
    Log    Bytes:${bytes}
    ${string} =    Decode Bytes To String    ${bytes}    UTF-8

sample
    ${str}    Set Variable    Sets a var in the hell
    ${mat}    Get Regexp Matches    ${str}    var
    ${mat2}    Get Regexp Matches    ${str}    sat
    Log    Mat:${mat}
    Log    Mat2:${mat2}
    ${lenmat}    Get Length    ${mat}
    ${lenmat2}    Get Length    ${mat2}

Match
    ${list}    Create List    test    shr    sns
    ${count}    Get Match Count    ${list}    est
    ${count2}    Get Regexp Matches    tester    ab
    ${len}    Get Length    ${count2}
    ${match}    Get Matches    ${list}    shr*
    Log    list:'${list}'

match2
    ${list}    Create List    delivery    newwxpay
    ${match}    Get Matches    ${list}    delivery

random_num
    ${long}    Generate Random String    1    34567
    ${pre}    Generate Random String    1    12345
    ${zero}    Generate Random String    ${long}    0
    ${限额}    Set Variable    ${pre}${zero}
    ${rand}    Generate Random String    1    [NUMBERS]
    ${random}    Evaluate    random.randint(0,15)    random

List
    ###
    ${list1}    Create List
    Append To List    ${list1}    test1
    Log    '${list1}'

Dict_pop
    &{data}    Create Dictionary    a=test1    b=test2    c=test3
    ${len}    Get Length    ${data}
    :FOR    ${i}    IN RANGE    ${len}
    \    Exit For Loop If    ${j}>${len}
    \    Pop From Dictionary    ${data}    b
    \    ${j}    Evaluate    ${i+1}
